"use client";import { useRouter } from "next/navigation";import { useEffect, useRef, useState, useTransition } from "react";import TextInput from "@ui/TextInput";import Textarea from "@ui/Textarea";import Button from "@ui/Button";import { host } from "@/lib/config";export default function PostForm({ post }) {  const router = useRouter();  const [isFetching, setIsFetching] = useState(false);  const [isPending, startTransition] = useTransition();  const isMutating = isFetching || isPending;  const titleRef = useRef<HTMLInputElement>();  const slugRef = useRef<HTMLInputElement>();  const contentRef = useRef<HTMLTextAreaElement>();  async function handleSubmit(e) {    e.preventDefault();    setIsFetching(true);    const result = await fetch(`${host}/api/posts/${post.id}`, {      method: "POST",      body: JSON.stringify({        // id: post.id,        title: titleRef.current.value,        slug: slugRef.current.value,        content: contentRef.current.value,      }),      headers: {        "Content-Type": "application/json",      },    });    setIsFetching(false);    startTransition(() => {      router.refresh();    });  }  function adjustContentHeight() {    if (contentRef.current) {      contentRef.current.style.height = "auto";      contentRef.current.style.height =        contentRef.current.scrollHeight + 10 + "px";    }  }  useEffect(() => {    adjustContentHeight();    // console.log("Render");  });  return (    <>      <h2>Form</h2>      {isMutating ? (        <p>Loading...</p>      ) : post ? (        <form onSubmit={handleSubmit}>          <TextInput label={`Id`} defaultValue={post.id} disabled />          <TextInput            label={`Title`}            ref={titleRef}            defaultValue={post.title || ""}          />          <TextInput            label={`Slug`}            ref={slugRef}            defaultValue={post.slug || ""}          />          <Textarea            label={`Content`}            ref={contentRef}            defaultValue={post.content || ""}            onChange={(e) => {              adjustContentHeight();            }}            rows={0}          />          <Button type={`submit`}>Update</Button>        </form>      ) : (        <p>No form for missing post</p>      )}      <br />    </>  );}