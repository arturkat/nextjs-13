import { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()async function main() {  await createUsers();  // await createUser();  // await getUsers();  // await getUsersWithPosts();  // await createUserWithNestedPost();}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })async function getUsersWithPosts() {  const usersWithPosts = await prisma.user.findMany({    include: {      posts: true,    },  })  console.dir(usersWithPosts, { depth: null })}async function createUserWithNestedPost() {  const user = await prisma.user.create({    data: {      name: 'Boris',      email: 'b@m.com',      posts: {        create: {          title: 'Hello World',        },      },    },  })  console.log(user)}async function createUser() {  const user = await prisma.user.create({    data: {      name: 'Artur',      email: 'a@m.com',    },  })  console.log(user)}async function createUsers() {  const user1 = await prisma.user.create({    data: {      name: 'Artur',      email: 'a@m.com',      posts: {        create: {          title: 'Fitness Exercises',        },      },    },  })  console.log(user1)  const user2 = await prisma.user.create({    data: {      name: 'Boris',      email: 'b@m.com',      posts: {        create: {          title: 'Beauty Routines'        }      }    },  })  console.log(user2)}async function getUsers() {  const users = await prisma.user.findMany()  console.log(users)}