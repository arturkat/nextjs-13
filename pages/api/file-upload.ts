import fs from "fs";import path from "path";import formidable, { File } from "formidable";import { NextApiRequest, NextApiResponse } from "next";export const config = {  api: {    bodyParser: false,  },};export default async function handler(  req: NextApiRequest,  res: NextApiResponse<{}>) {  try {    // Parse request with formidable    const { fields, files } = await parseFormAsync(req);    // Files are always arrays (formidable v3+)    const myFile = (files["file"] as any as File[])[0];    // Save file in the public folder    await saveFile(myFile);    // Return success    res.status(200).json({ ok: true });  } catch (e) {    return res.status(500).json(e);  }}async function saveFile(file) {  try {    const fileName = file.originalFilename;    const uploadsFolder = path.resolve("public", "uploads");    const fileData = fs.readFileSync(file.filepath);    fs.writeFileSync(`${uploadsFolder}/${fileName}`, fileData);    fs.unlinkSync(file.filepath);  } catch (e) {    throw e;  }}type FormidableParseReturn = {  fields: formidable.Fields;  files: formidable.Files;};async function parseFormAsync(  req: NextApiRequest,  formidableOptions?: formidable.Options): Promise<FormidableParseReturn> {  const form = formidable({ multiples: true, keepExtensions: true });  return await new Promise<FormidableParseReturn>((resolve, reject) => {    form.parse(req, async (err, fields, files) => {      if (err) return reject(err);      resolve({ fields, files });    });  });}